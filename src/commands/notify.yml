description: Notify a Slack channel with a custom message

parameters:
  webhook:
    description: Enter either your Webhook value or use the CircleCI UI to add your token under the 'SLACK_WEBHOOK' env var
    type: string
    default: ${SLACK_WEBHOOK}

  message:
    description: Enter custom message.
    type: string
    default: Your job on CircleCI has completed.

  color:
    description: Hex color value for notification attachment color.
    type: string
    default: "#333333"

  mentions:
    description: A comma separated list of user IDs. No spaces.
    type: string
    default: ""

  when:
    description: "When to run send this message. Options: always (default), on_fail, on_success"
    type: enum
    default: "always"
    enum: ["always", "on_fail", "on_success"]

steps:
  - run:
      name: Slack - Setting Failure Condition
      command: |
        echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
      when: on_fail
  - run:
      name: Slack - Setting Success Condition
      command: |
        echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
      when: on_success

  - run:
      name: Provide error if non-bash shell
      command: |
        if [ -z "$BASH" ]; then
          echo Bash not installed.
          exit 1
        fi

  - run:
      name: Slack Notification
      shell: /bin/bash
      command: |
        # Provide error if no webhook is set and error. Otherwise continue
        if [ -z "<< parameters.webhook >>" ]; then
          echo "NO SLACK WEBHOOK SET"
          echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
          exit 1
        else
          if [[ << parameters.when >> == "always" || ( << parameters.when >> == "on_success" && "$SLACK_BUILD_STATUS" == "success") || ( << parameters.when >> == "on_fail" && "$SLACK_BUILD_STATUS" == "fail") ]; then
            # Webhook properly set.
            echo Notifying Slack Channel
            #Create Members string
            if [ -n "<< parameters.mentions >>" ]; then
              IFS="," read -ra SLACK_MEMBERS \<<< "<< parameters.mentions >>"
              for i in "${SLACK_MEMBERS[@]}"; do
                if [ $(echo ${i} | head -c 1) == "S" ]; then
                  SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                else
                  SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                fi
              done
            fi
            curl -X POST -H 'Content-type: application/json' \
              --data \
              "{ \
                \"attachments\": [ \
                  { \
                    \"fallback\": \"<< parameters.message >> - $CIRCLE_BUILD_URL\", \
                    \"text\": \"<< parameters.message >> $SLACK_MENTIONS\", \
                    \"fields\": [ \
                      { \
                        \"title\": \"Project\", \
                        \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                        \"short\": true \
                      }, \
                      { \
                        \"title\": \"Job Number\", \
                        \"value\": \"$CIRCLE_BUILD_NUM\", \
                        \"short\": true \
                      } \
                    ], \
                    \"actions\": [ \
                      { \
                        \"type\": \"button\", \
                        \"text\": \"Visit Job\", \
                        \"url\": \"$CIRCLE_BUILD_URL\" \
                      } \
                    ], \
                    \"color\": \"<< parameters.color >>\" \
                  } \
                ] \
              }" << parameters.webhook >>
          fi
        fi
